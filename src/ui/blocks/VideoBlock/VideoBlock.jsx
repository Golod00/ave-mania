'use client';

import { useRef, useState, useEffect } from 'react';
import gsap from 'gsap';
import classes from './VideoBlock.module.scss';
import Image from 'next/image';
import TextTitle from '@/ui/components/TextTitle';
export default function VideoBlock() {
    const videoRef = useRef(null);
    const img1Ref = useRef(null); // добавлен
    const img2Ref = useRef(null); // добавлен
    const [isPlaying, setIsPlaying] = useState(false);
    const [showControls, setShowControls] = useState(false);
    const [isDesktop, setIsDesktop] = useState(false);

    useEffect(() => {
        const checkScreen = () => setIsDesktop(window.innerWidth >= 1240);
        checkScreen();
        window.addEventListener('resize', checkScreen);
        return () => window.removeEventListener('resize', checkScreen);
    }, []);

    // Скрытие контролов через 2 сек
    useEffect(() => {
        let timer;
        if (isDesktop && isPlaying && showControls) {
            timer = setTimeout(() => setShowControls(false), 2000);
        }
        return () => clearTimeout(timer);
    }, [isPlaying, showControls, isDesktop]);

    // GSAP анимация вращения картинок
    useEffect(() => {
        if (img1Ref.current && img2Ref.current) {
            // Вращение большой планеты
            const rotation1 = gsap.to(img1Ref.current, {
                rotate: 360,
                duration: 60,
                repeat: -1,
                ease: 'linear',
                transformOrigin: '50% 50%',
            });

            // Вращение маленькой планеты внутри большой (противоположное)
            const rotation2 = gsap.to(img2Ref.current, {
                rotate: -360,
                duration: 40,
                repeat: -1,
                ease: 'linear',
                transformOrigin: '50% 50%',
            });

            return () => {
                rotation1.kill();
                rotation2.kill();
            };
        }
    }, []);

    const handlePlay = () => {
        if (videoRef.current) {
            videoRef.current.muted = false;
            videoRef.current
                .play()
                .then(() => {
                    setIsPlaying(true);
                    if (isDesktop) setShowControls(true);
                })
                .catch(err => console.log('Помилка запуска відео', err));
        }
    };

    const handlePause = () => {
        if (videoRef.current) {
            videoRef.current.pause();
            setIsPlaying(false);
            setShowControls(false);
        }
    };

    const handleMobileToggle = () => {
        if (!isDesktop) {
            isPlaying ? handlePause() : handlePlay();
        }
    };

    return (
    <section className={classes.videoBlock}>
        <div className={classes.mainWrapper}>
            <div className={classes.wrapImg1} ref={img1Ref}>
                <Image
                    src="/images/videoBlock/bg1.webp"
                    width={637}
                    height={637}
                    alt="Image ave mania"
                />
                <div className={classes.wrapImg2} ref={img2Ref}>
                    <Image
                        src="/images/videoBlock/bg2.webp"
                        width={99}
                        height={99}
                        alt="Image ave mania"
                    />
                </div>
            </div>
            <TextTitle className={classes.wrapIcon}>
               <svg xmlns="http://www.w3.org/2000/svg" width="57" height="57" viewBox="0 0 57 57" fill="none">
                    <path d="M40.3101 4.65191C41.7553 6.80658 41.4602 9.10127 40.6163 11.2933C39.4643 14.2844 38.3253 17.3447 35.4668 19.2697C35.1232 19.5012 34.8245 19.8522 34.6097 20.2126C33.4092 22.2216 34.0627 23.5305 36.3742 23.663C37.1042 23.706 37.8884 23.6108 38.5811 23.3792C42.0446 22.231 45.6127 22.554 49.1566 22.5278C50.3515 22.5204 51.7575 22.6604 51.9666 23.9973C52.172 25.3024 50.8725 26.038 49.8138 26.5328C48.2342 27.2722 46.481 27.2965 44.7595 27.4328C42.8064 27.5877 41.2679 28.3664 40.7059 30.4631C40.3829 31.6749 40.6107 32.4834 41.8897 32.9688C44.4159 33.9285 46.8619 35.0227 48.3967 37.4668C48.6693 37.9018 49.1416 38.1987 49.207 38.7868C49.3172 39.7633 49.2219 40.5569 47.9411 40.4262C46.1281 40.2394 44.2927 40.1741 42.6832 39.1135C41.337 38.2285 39.9086 37.4705 38.5699 36.5761C37.3992 35.7938 36.2006 35.2019 34.8114 34.8341C31.3049 33.9043 30.1622 34.5148 29.6712 38.2323C29.1745 41.9759 28.3436 45.6168 27.1076 49.1755C26.8593 49.8888 26.5997 50.5759 25.7726 51.291C24.3218 49.31 23.7692 47.2916 23.7897 45.107C23.8158 42.6312 23.715 40.161 23.926 37.6833C24.3144 33.1051 22.6657 31.8131 17.9885 32.8475C16.7301 33.1257 15.4697 33.4113 14.2038 33.6447C11.2818 34.1843 8.63417 33.4095 6.26851 31.7328C4.72066 30.6349 4.79163 29.6117 6.60835 29.0086C9.94679 27.8996 13.2161 26.3499 16.8832 26.6075C18.459 26.7158 19.977 26.5851 20.8023 25.0036C21.6238 23.4297 21.2616 21.9882 20.2552 20.5207C18.2723 17.6229 15.9982 14.8651 15.1822 11.3157C15.0627 10.7948 14.7808 10.2869 14.7696 9.76971C14.7434 8.58221 14.7416 7.31256 16.1008 6.75615C17.2977 6.26696 18.1509 6.99515 18.9482 7.7644C21.0002 9.73983 22.3744 12.1484 23.3901 14.7811C23.8158 15.8808 24.1519 17.0217 24.6336 18.0953C25.2965 19.5759 26.6016 19.897 28.1028 19.9194C29.5778 19.9418 30.5506 19.3966 31.0921 17.9888C32.569 14.15 34.5967 10.6081 37.0482 7.31071C37.8735 6.20164 38.6409 4.98986 40.3101 4.65191ZM34.6172 2.72691C33.8984 3.51857 33.2841 4.4185 32.6996 5.32032C31.2601 7.54781 29.8654 9.80332 28.3063 12.281C27.6883 11.1252 27.2271 10.2122 26.7192 9.32346C24.4749 5.38008 21.3792 2.71195 16.6255 2.30119C14.075 2.08086 12.0735 2.90054 11.0801 5.22325C9.82729 8.15091 9.30075 11.1477 10.4845 14.3143C11.5077 17.0497 13.175 19.4172 14.6351 21.977C11.1361 22.6697 7.80518 23.4745 4.5657 24.6097C1.21233 25.7878 0.26194 28.5083 0.0154781 31.716C-0.214179 34.7183 2.15709 35.3457 4.12131 36.3353C4.78414 36.6714 5.52352 36.8674 6.24237 37.0728C10.3034 38.236 14.4036 38.8503 18.7933 37.4537C18.7933 40.3851 18.909 42.9486 18.7653 45.4991C18.5823 48.733 19.6167 51.5766 21.2205 54.2578C23.0895 57.3816 27.7854 57.4245 29.6973 54.383C30.5618 53.0088 31.1051 51.4852 31.6615 49.9672C32.8621 46.6923 33.6127 43.2847 34.4174 39.7129C35.4723 40.3402 36.292 40.8425 37.1266 41.3168C40.4315 43.1932 43.9286 44.4872 47.7487 44.8027C52.1122 45.1612 54.209 43.3762 54.3435 39.052C54.4088 36.9776 53.2531 35.4185 51.9647 33.9154C51.3168 33.1593 50.0266 32.8008 50.2507 31.3295C53.957 30.5714 55.7774 27.9612 56.7091 24.5126C57.3962 21.9639 56.9463 20.8231 54.4928 19.602C52.4558 18.5882 50.3123 17.9552 47.9709 18C46.4268 18.028 44.8136 18.3436 43.2079 17.649C43.867 15.7931 44.5373 14.1033 45.0675 12.3706C46.031 9.23013 46.3167 6.04106 45.4223 2.82212C45.1889 1.98751 44.892 1.17905 44.0238 0.775753C40.7694 -0.74036 37.0949 -0.00470734 34.6172 2.72691Z" fill="#1C1C1C"/>
                    <path d="M28.1028 19.9194C26.6016 19.897 25.2965 19.5759 24.6337 18.0953C24.1519 17.0217 23.8159 15.8809 23.3902 14.7811C22.3744 12.1485 21.0002 9.73984 18.9482 7.76442C18.151 6.99516 17.2977 6.26698 16.1009 6.75616C14.7416 7.31257 14.7435 8.58223 14.7696 9.76972C14.7808 10.2869 15.0628 10.7948 15.1823 11.3157C15.9982 14.8651 18.2723 17.6229 20.2552 20.5207C21.2616 21.9882 21.6239 23.4297 20.8023 25.0037C19.9771 26.5851 18.4591 26.7158 16.8832 26.6075C13.2162 26.3499 9.94683 27.8996 6.60839 29.0087C4.79167 29.6117 4.7207 30.6349 6.26855 31.7328C8.63421 33.4095 11.2818 34.1843 14.2039 33.6447C15.4698 33.4113 16.7301 33.1257 17.9886 32.8475C22.6657 31.8131 24.3144 33.1051 23.9261 37.6833C23.7151 40.161 23.8159 42.6312 23.7897 45.1071C23.7692 47.2916 24.3219 49.31 25.7726 51.291C26.5998 50.5759 26.8593 49.8888 27.1076 49.1755C28.3437 45.6168 29.1746 41.9759 29.6712 38.2323C30.1623 34.5148 31.305 33.9043 34.8114 34.8341C36.2006 35.2019 37.3993 35.7938 38.57 36.5761C39.9087 37.4705 41.3371 38.2285 42.6833 39.1136C44.2927 40.1741 46.1281 40.2395 47.9411 40.4262C49.222 40.5569 49.3172 39.7633 49.207 38.7868C49.1417 38.1987 48.6693 37.9018 48.3967 37.4668C46.8619 35.0227 44.416 33.9285 41.8897 32.9688C40.6108 32.4834 40.383 31.6749 40.706 30.4632C41.268 28.3664 42.8065 27.5878 44.7595 27.4328C46.481 27.2965 48.2343 27.2722 49.8139 26.5328C50.8725 26.0381 52.172 25.3024 51.9666 23.9973C51.7575 22.6604 50.3516 22.5204 49.1566 22.5278C45.6128 22.554 42.0447 22.231 38.5812 23.3793C37.8884 23.6108 37.1043 23.706 36.3742 23.663C34.0627 23.5305 33.4092 22.2216 34.6098 20.2126C34.8245 19.8522 35.1232 19.5012 35.4668 19.2697C38.3254 17.3447 39.4643 14.2844 40.6163 11.2933C41.4603 9.10128 41.7553 6.80659 40.3102 4.65192C38.6409 4.98987 37.8735 6.20165 37.0482 7.31072C34.5967 10.6081 32.569 14.15 31.0921 17.9888C30.5506 19.3966 29.5779 19.9418 28.1028 19.9194Z" fill="#F7F7F7"/>
                </svg>
            </TextTitle>
        </div>
      <div className="container">
        <p className={classes.text}>
            а тут ми показуємо етапи обробки сировини

            <TextTitle className={classes.wrapIcon}>
                <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 30 30" fill="none">
                    <path d="M1 1C3.50299 1 9.24759 1.34452 13.1639 2.9053C15.9307 4.00795 17.4378 6.3009 18.35 7.51586C20.3882 10.2306 19.6197 14.9061 18.2325 17.5643C17.0471 19.8359 13.7159 19.9642 11.4909 19.9668C10.5428 19.968 9.79047 19.1865 9.18234 18.5353C8.69526 18.0137 8.56899 16.5843 8.82738 14.8017C8.99084 13.674 11.3408 13.6167 13.5554 13.3988C17.5491 13.0058 22.3811 16.6443 24.4417 18.7415C25.9566 20.2833 25.9672 23.2581 26.4892 26.4762C26.6707 27.5952 26.578 29.1566 26.3196 29.3955C25.4579 30.1919 24.6675 26.7581 24.0163 25.8015C23.7528 25.4145 23.4512 25.3617 23.4473 25.5757C23.4146 27.362 24.9232 28.3997 25.6175 29.2297C26.223 29.1044 27.1809 28.4963 28.2236 27.7577C28.6634 27.4497 28.9217 27.2775 29.188 26.839" stroke="black" stroke-width="0.96" stroke-linecap="round"/>
                </svg>
            </TextTitle>

        </p>
        <div
          className={classes.videoContainer}
          onMouseEnter={() => isDesktop && isPlaying && setShowControls(true)}
          onMouseLeave={() => isDesktop && isPlaying && setShowControls(false)}
          onClick={handleMobileToggle}
        >
          <video
            ref={videoRef}
            src="/images/heroVideo.mp4"
            playsInline
            className={classes.video}
          />

          {!isPlaying && (
            <button
              className={`${classes.btn} ${classes.playButton}`}
              onClick={handlePlay}
            >
              <svg xmlns="http://www.w3.org/2000/svg" width="86" height="99" viewBox="0 0 86 99" fill="none">
                <path d="M0.930438 0.25L85.6804 49.1804L0.930436 98.1109L0.930438 0.25Z" fill="white"/>
              </svg>
            </button>
          )}

          {isDesktop && isPlaying && showControls && (
            <button
              className={`${classes.btn} ${classes.pauseButton}`}
              onClick={handlePause}
            >
              <svg xmlns="http://www.w3.org/2000/svg" width="86" height="99" viewBox="0 0 86 99" fill="none">
                <rect x="10" y="0" width="22" height="99" fill="white"/>
                <rect x="54" y="0" width="22" height="99" fill="white"/>
              </svg>
            </button>
          )}
        </div>
      </div>
    </section>
  );
}